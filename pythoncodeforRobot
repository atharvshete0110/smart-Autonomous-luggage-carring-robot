import socket
import time
import cv2
import mediapipe as mp

ESP32_IP = '192.168.137.69'
ESP32_PORT = 80

def connect_to_esp32():
    while True:
        try:
            print("Trying to connect to ESP32...")
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((ESP32_IP, ESP32_PORT))
            print("Connected to ESP32!")
            return s
        except Exception as e:
            print("Connection failed:", e)
            time.sleep(2)

sock = connect_to_esp32()

def send_to_esp32(data):
    global sock
    try:
        print(data)
        sock.sendall((data + '\n').encode())
    except Exception as e:
        print("Send failed:", e)
        sock.close()
        sock = connect_to_esp32()

# === MediaPipe Setup ===
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(static_image_mode=False, min_detection_confidence=0.5)
mp_drawing = mp.solutions.drawing_utils

# üîÅ Replace with your phone's IP address
ip_camera_url = "http://192.168.137.155:8080/video"  # <-- Change this to your IP
cap = cv2.VideoCapture(ip_camera_url)
# cap = cv2.VideoCapture(ip_camera_url)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame from IP webcam.")
        break

    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = pose.process(rgb_frame)

    height, width, _ = frame.shape
    cv2.line(frame, (320, 0), (320, 480), (0, 0, 0), 3)
    cv2.line(frame, (0, 300), (700, 300), (0, 0, 0), 3)

    if results.pose_landmarks:
        landmarks = results.pose_landmarks.landmark
        x_coords = [int(lm.x * width) for lm in landmarks]
        y_coords = [int(lm.y * height) for lm in landmarks]

        x_min, x_max = min(x_coords), max(x_coords)
        y_min, y_max = min(y_coords), max(y_coords)

        x = (x_max + x_min) / 2
        y = (y_max + y_min) / 2

        # err_x = 320 - x
        # err_y = -y + 480
        err_x = 320 - x
        err_y = -y + 480

        send_to_esp32(f"{int(err_x)},{int(err_y)}")

        cv2.rectangle(frame, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2)
        cv2.circle(frame, (int(x), int(y)), 4, (0, 255, 0), -1)
        mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

        cv2.putText(frame, f"Error X: {err_x}", (30, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
        cv2.putText(frame, f"Error Y: {err_y}", (30, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
    else:
        send_to_esp32("0,0")
        cv2.putText(frame, "No Human Detected", (30, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)

    cv2.imshow("Human Detection", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
sock.close()
